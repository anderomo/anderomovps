name: CI

on: [push, workflow_dispatch]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Enable Remote Desktop
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 1

    - name: Set runneradmin password
      run: Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "Grok3xAI2025!" -Force)

    - name: Install WinRAR
      shell: cmd
      run: |
        powershell -Command "Invoke-WebRequest -Uri 'https://www.rarlab.com/rar/winrar-x64-701.exe' -OutFile 'winrar.exe'"
        winrar.exe /S
        if exist "C:\Program Files\WinRAR\WinRAR.exe" (echo WinRAR installed successfully!) else (echo Failed to install WinRAR & exit 1)

    - name: Install psutil
      shell: cmd
      run: |
        pip install psutil

    - name: Setup L2TP/IPSec VPN with RRAS
      shell: pwsh
      run: |
        # Install RRAS role with VPN and NAT
        Install-WindowsFeature -Name RemoteAccess -IncludeManagementTools
        Install-WindowsFeature -Name DirectAccess-VPN -IncludeManagementTools
        Install-WindowsFeature -Name Routing -IncludeManagementTools

        # Start the Remote Access service
        Start-Service -Name RemoteAccess
        Set-Service -Name RemoteAccess -StartupType Automatic

        # Configure RRAS for VPN
        Import-Module -Name RemoteAccess -SkipEditionCheck
        Install-RemoteAccess -VpnType Vpn

        # Set up IP range for VPN clients (10.0.0.100 - 10.0.0.200) with StaticPool method
        Set-VpnIpAddressAssignment -IPAddressRange "10.0.0.100", "10.0.0.200" -IPAssignmentMethod StaticPool

        # Enable NAT for internet access
        netsh routing ip nat install
        netsh routing ip nat add interface "Ethernet"
        netsh routing ip nat set interface "Ethernet" mode=full

        # Configure L2TP/IPSec with a pre-shared key
        Set-VpnServerConfiguration -L2tpPsk "MySecurePSK2025!"

        # Create a VPN user
        net user vpnuser MyVpnPass2025! /add
        net localgroup "Remote Desktop Users" vpnuser /add

        # Allow L2TP/IPSec ports in firewall
        netsh advfirewall firewall add rule name="Allow L2TP" protocol=UDP dir=in localport=1701 action=allow
        netsh advfirewall firewall add rule name="Allow IPSec" protocol=UDP dir=in localport=500 action=allow
        netsh advfirewall firewall add rule name="Allow IPSec NAT-T" protocol=UDP dir=in localport=4500 action=allow

        Write-Output "L2TP/IPSec VPN is set up with PSK: MySecurePSK2025! and user: vpnuser/MyVpnPass2025!"

    - name: Create TCP tunnel with Bore for VPN ports
      shell: pwsh
      run: |
        New-Item -ItemType Directory -Path "tools" -Force
        Invoke-WebRequest -Uri 'https://github.com/ekzhang/bore/releases/download/v0.5.3/bore-v0.5.3-x86_64-pc-windows-msvc.zip' -OutFile 'tools\bore.zip'
        Expand-Archive -Path 'tools\bore.zip' -DestinationPath 'tools' -Force
        # Start tunnels for L2TP (1701), IPSec (500), and NAT-T (4500)
        Start-Process -FilePath "tools\bore.exe" -ArgumentList "local 1701 --to bore.pub" -NoNewWindow -PassThru -RedirectStandardOutput "bore_l2tp.log"
        Start-Process -FilePath "tools\bore.exe" -ArgumentList "local 500 --to bore.pub" -NoNewWindow -PassThru -RedirectStandardOutput "bore_ipsec.log"
        Start-Process -FilePath "tools\bore.exe" -ArgumentList "local 4500 --to bore.pub" -NoNewWindow -PassThru -RedirectStandardOutput "bore_nat.log"
        Start-Sleep -Seconds 5
        $l2tpLog = Get-Content -Path "bore_l2tp.log" -Raw
        $ipsecLog = Get-Content -Path "bore_ipsec.log" -Raw
        $natLog = Get-Content -Path "bore_nat.log" -Raw
        if ($l2tpLog -match "listening at bore.pub:(\d+)") {
          $l2tpPort = $matches[1]
          Write-Output "L2TP tunnel is active at bore.pub:$l2tpPort"
        }
        if ($ipsecLog -match "listening at bore.pub:(\d+)") {
          $ipsecPort = $matches[1]
          Write-Output "IPSec tunnel is active at bore.pub:$ipsecPort"
        }
        if ($natLog -match "listening at bore.pub:(\d+)") {
          $natPort = $matches[1]
          Write-Output "NAT-T tunnel is active at bore.pub:$natPort"
        }
